#### main.html ####

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>불법 주정차 구역 안내 서비스</title>
  <style>
    html, body {
      height: 100%;
      margin: 0; padding: 0;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    /* 상단 배너 스타일 */
    #header {
      height: 60px;
      background: #004c99;
      color: white;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      box-sizing: border-box;
      flex-shrink: 0;
    }
    #header h1 { margin: 0; font-size: 20px; }
    #header button {
      background: #007bff;
      border: none;
      color: white;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    #header button:hover { background: #0056b3; }

    /* 좌우 콘텐츠 레이아웃 */
    #container {
      flex: 1;
      display: flex;
      height: calc(100% - 60px);
    }
    /* 좌측 리스트 영역 */
    #parkingList {
      width: 300px;
      border-right: 1px solid #ddd;
      box-sizing: border-box;
      padding: 15px;
      overflow-y: auto;
      background: #f9f9f9;
    }
    #parkingList h2 { margin-top: 0; font-size: 18px; margin-bottom: 6px; color: #333; }
    #sortSelect {
      margin-bottom: 12px;
      width: 100%;
      padding: 5px;
      font-size: 14px;
    }
    #parkingUl { list-style: none; padding-left: 0; margin: 0; }
    #parkingUl li {
      padding: 8px 10px;
      border-radius: 4px;
      margin-bottom: 6px;
      background: white;
      border: 1px solid #ccc;
      transition: background-color 0.2s;
    }
    #parkingUl li:hover { background-color: #e6f0ff; border-color: #007bff; }

    /* 우측 지도 영역 */
    #mapContainer {
      flex: 1;
      position: relative;
      background: #eee;
      display: flex;
      flex-direction: column;
    }
    #map { flex: 1; position: relative; }

    button#placeCarBtn,
    button#clearBtn {
      position: absolute;
      top: 10px;
      z-index: 100;
      padding: 6px 12px;
      font-size: 14px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      background-color: #007bff;
      color: white;
      user-select: none;
      transition: background-color 0.2s;
    }
    button#placeCarBtn:hover,
    button#clearBtn:hover { background-color: #0056b3; }
    button#placeCarBtn { left: 10px; }
    button#clearBtn { left: 120px; }

    /* 로딩 오버레이 */
    #loadingOverlay {
      position: absolute; top: 0; left: 0;
      width: 100%; height: 100%;
      background-color: rgba(255, 255, 255, 0.7);
      z-index: 50;
      display: flex; align-items: center; justify-content: center;
      font-size: 20px; font-weight: bold; color: #444;
      user-select: none;
    }

    /* 모달 스타일 */
    .modal {
      display: none;
      position: fixed; z-index: 200;
      left: 0; top: 0;
      width: 100%; height: 100%;
      background-color: rgba(0,0,0,0.4);
    }
    .modal-content {
      background-color: #fff;
      margin: 10% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 400px;
      border-radius: 5px;
      position: relative;
    }
    .close {
      position: absolute;
      top: 10px; right: 15px;
      color: #aaa;
      font-size: 24px;
      font-weight: bold;
      cursor: pointer;
    }
  </style>

  <!-- 라이브러리 로딩 -->
  <script src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=f4c124856678656d1b266147d1cb459e&autoload=false"></script>
  <script src="https://unpkg.com/@turf/turf/turf.min.js"></script>
</head>
<body>
  <!-- 상단 Header -->
  <div id="header">
    <h1>불법 주정차 구역 안내 서비스</h1>
    <div>
      <button>로그인</button>
      <button>회원가입</button>
    </div>
  </div>

  <!-- 좌우 콘텐츠 영역 -->
  <div id="container">
    <div id="parkingList">
      <h2>주차장 리스트</h2>
      <select id="sortSelect" onchange="handleSortChange()">
        <option value="name">이름순</option>
        <option value="distance">거리순</option>
      </select>
      <ul id="parkingUl"></ul>
    </div>
    <div id="mapContainer">
      <div id="map">
        <div id="loadingOverlay">🛣 도로 데이터를 불러오는 중입니다...</div>
      </div>
      <button id="placeCarBtn" onclick="placeRandomOnRoad()">차량 주차</button>
      <button id="clearBtn" onclick="clearMarkers()">마커 초기화</button>
    </div>
  </div>

  <!-- 주차장 상세 모달 -->
  <div id="parkingModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeParkingModal()">&times;</span>
      <div id="parkingModalBody"></div>
    </div>
  </div>

  <script>
    let map, carMarker = null, infoWindow = null;
    const parkingMarkers = [], roadLines = [];
    let parkingLots = [], trafficCameras = [];
    let currentCarLocation = null, currentVisibleLots = [];

    async function loadParkingData() {
      try {
        const res = await fetch('/api/parking-lots/');
        parkingLots = await res.json();
      } catch {
        parkingLots = [];
      }
    }

    async function loadCameraData() {
      try {
        const res = await fetch('/api/traffic-cameras/');
        trafficCameras = await res.json();
      } catch {
        trafficCameras = [];
      }
    }

    window.onload = async () => {
      await loadParkingData();
      await loadCameraData();
      loadMap();
    };

    function loadMap() {
      kakao.maps.load(async () => {
        map = new kakao.maps.Map(document.getElementById('map'), {
          center: new kakao.maps.LatLng(37.659434, 126.773379),
          level: 3
        });
        await loadRoadData();
        renderParkingList();
        document.getElementById('loadingOverlay').style.display = 'none';
      });
    }

    async function loadRoadData() {
      const url = `https://overpass-api.de/api/interpreter?data=[out:json][timeout:25];
        relation(8125011);
        map_to_area->.searchArea;
        (way["highway"~"motorway|trunk|primary|secondary|tertiary|residential|unclassified|service"](area.searchArea););
        out geom;`;
      try {
        const res = await fetch(url);
        const data = await res.json();
        data.elements.forEach(el => {
          if (el.type === 'way' && el.geometry) {
            const coords = el.geometry.map(p => [p.lon, p.lat]);
            roadLines.push(turf.lineString(coords));
          }
        });
      } catch {}
    }

    function renderParkingList(filteredLots = null) {
      const ul = document.getElementById('parkingUl');
      ul.innerHTML = '';
      const listToShow = filteredLots ?? parkingLots;
      currentVisibleLots = listToShow;
      handleSortChange(); // 정렬 후 렌더링
    }

    function handleSortChange() {
      const sortType = document.getElementById('sortSelect').value;
      let sorted = [...currentVisibleLots];
      if (sortType === 'name') {
        sorted.sort((a, b) => a.name.localeCompare(b.name));
      } else if (sortType === 'distance' && currentCarLocation) {
        const carPt = turf.point([currentCarLocation[1], currentCarLocation[0]]);
        sorted.sort((a, b) => {
          const da = turf.distance(carPt, turf.point([a.longitude, a.latitude]), { units: 'kilometers' });
          const db = turf.distance(carPt, turf.point([b.longitude, b.latitude]), { units: 'kilometers' });
          return da - db;
        });
      }
      const ul = document.getElementById('parkingUl');
      ul.innerHTML = '';
      if (!sorted.length) {
        const li = document.createElement('li');
        li.textContent = '주변에 주차장이 존재하지 않습니다.';
        li.style.color = '#888';
        li.style.fontStyle = 'italic';
        ul.appendChild(li);
        return;
      }
      sorted.forEach(lot => {
        const li = document.createElement('li');

        const a = document.createElement('a');
        let distanceText = '';

        if (sortType === 'distance' && currentCarLocation) {
          const carPt = turf.point([currentCarLocation[1], currentCarLocation[0]]);
          const lotPt = turf.point([lot.longitude, lot.latitude]);
          const distanceKm = turf.distance(carPt, lotPt, { units: 'kilometers' });
          const distanceM = Math.round(distanceKm * 1000);
          distanceText = ` (${distanceM}m)`;
        }

        a.textContent = lot.name + distanceText;
        a.href = '#';
        a.style.color = '#007bff';
        a.style.textDecoration = 'none';
        a.style.display = 'block';
        a.style.width = '100%';

        a.addEventListener('mouseover', () => a.style.textDecoration = 'underline');
        a.addEventListener('mouseout', () => a.style.textDecoration = 'none');
        a.addEventListener('click', e => {
          e.preventDefault();
          openParkingModal(lot);
        });

        li.appendChild(a);
        ul.appendChild(li);
      });

    }

    function openParkingModal(lot) {
      const modal = document.getElementById('parkingModal');
      const body = document.getElementById('parkingModalBody');
      body.innerHTML = `
        <h3><a href="/detail/${lot.number}">${lot.name}</a></h3>
        <p><strong>주소:</strong> ${lot.road_address || lot.jibun_address || '정보 없음'}</p>
        <p><strong>전화번호:</strong> ${lot.phone_number || '정보 없음'}</p>
        <p><strong>총 주차 구획수:</strong> ${lot.capacity}</p>
      `;
      modal.style.display = 'block';
    }

    function closeParkingModal() {
      document.getElementById('parkingModal').style.display = 'none';
    }

    function placeRandomOnRoad() {
      if (!roadLines.length) { alert('도로 데이터가 아직 준비되지 않았습니다.'); return; }
      if (carMarker) { carMarker.setMap(null); carMarker = null; }
      if (infoWindow) { infoWindow.setMap(null); infoWindow = null; }
      parkingMarkers.forEach(m => m.setMap(null)); parkingMarkers.length = 0;

      const line = roadLines[Math.floor(Math.random() * roadLines.length)];
      const dist = Math.random() * turf.length(line, { units: 'kilometers' });
      const pt = turf.along(line, dist, { units: 'kilometers' });
      const [lon, lat] = pt.geometry.coordinates;
      carMarker = new kakao.maps.Marker({ map, position: new kakao.maps.LatLng(lat, lon) });
      map.setCenter(new kakao.maps.LatLng(lat, lon));
      currentCarLocation = [lat, lon];

      const illegal = isIllegalParkingArea(lat, lon);
      const msg = illegal ? "🚫 불법 주정차 구역입니다." : "✅ 불법 주정차 구역이 아닙니다.";
      infoWindow = new kakao.maps.CustomOverlay({
        content: `<div style="padding:12px;font-size:16px;font-weight:bold;min-width:220px;text-align:center;
                  background:#fff; border:2px solid ${illegal?'#dc3545':'#28a745'};
                  border-radius:8px;box-shadow:0 2px 6px rgba(0,0,0,0.2);
                  color:${illegal?'#dc3545':'#28a745'}">${msg}</div>`,
        position: new kakao.maps.LatLng(lat, lon),
        yAnchor: 1.8, zIndex: 100
      });
      infoWindow.setMap(map);

      if (illegal) {
        showNearbyParkingLots(lat, lon);
        const center = turf.point([lon, lat]);
        const nearby = parkingLots.filter(lot =>
          turf.distance(center, turf.point([lot.longitude, lot.latitude]), { units: 'kilometers' }) <= 1
        );
        renderParkingList(nearby);
      } else {
        renderParkingList();
      }
    }

    function isIllegalParkingArea(lat, lon) {
      const pt = turf.point([lon, lat]);
      const nearCam = trafficCameras.some(c =>
        turf.distance(pt, turf.point([c.longitude, c.latitude]), { units: 'kilometers' }) <= 0.1
      );
      const nearLot = parkingLots.some(l =>
        turf.distance(pt, turf.point([l.longitude, l.latitude]), { units: 'kilometers' }) <= 0.05
      );
      return !(nearCam && nearLot) && nearCam;
    }

    function showNearbyParkingLots(lat, lon) {
      parkingMarkers.forEach(m => m.setMap(null)); parkingMarkers.length = 0;
      const center = turf.point([lon, lat]);
      parkingLots.forEach(lot => {
        if (turf.distance(center, turf.point([lot.longitude, lot.latitude]), { units: 'kilometers' }) <= 1) {
          const mk = new kakao.maps.Marker({
            map,
            position: new kakao.maps.LatLng(lot.latitude, lot.longitude),
            image: new kakao.maps.MarkerImage(
              'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png',
              new kakao.maps.Size(24, 35),
              { offset: new kakao.maps.Point(12, 35) }
            )
          });
          const iw = new kakao.maps.InfoWindow({
            content: `<div style="padding:5px;font-size:13px;">${lot.name}</div>`
          });
          kakao.maps.event.addListener(mk, 'mouseover', () => iw.open(map, mk));
          kakao.maps.event.addListener(mk, 'mouseout', () => iw.close());
          parkingMarkers.push(mk);
        }
      });
    }

    function clearMarkers() {
      if (carMarker) { carMarker.setMap(null); carMarker = null; }
      parkingMarkers.forEach(m => m.setMap(null)); parkingMarkers.length = 0;
      renderParkingList();
      if (infoWindow) { infoWindow.close(); infoWindow = null; }
    }
  </script>
</body>
</html>


#### [config] urls.py ####

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('testapp.urls')),
]

#### [app] urls.py ####

from django.urls import path
from . import views

urlpatterns = [
    path('', views.main, name='main'),
    path('api/parking-lots/', views.parking_lot_list, name='parking-lot-list'),
    path('api/traffic-cameras/', views.traffic_camera_list, name='traffic_camera_list'),
]


#### model.py ####

from django.db import models

class ParkingLot(models.Model):
    number = models.IntegerField()  # 주차장번호
    name = models.CharField(max_length=100)  # 주차장명
    category = models.CharField(max_length=20)  # 주차장구분 (공영 등)
    type = models.CharField(max_length=20)  # 주차장유형 (노외, 부설 등)
    road_address = models.CharField(max_length=200, null=True, blank=True)  # 소재지도로명주소
    jibun_address = models.CharField(max_length=200, null=True, blank=True)  # 소재지지번주소
    capacity = models.IntegerField()  # 주차구획수

    operating_days = models.CharField(max_length=50)  # 운영요일

    weekday_start = models.CharField(max_length=10)  # 평일운영시작시각
    weekday_end = models.CharField(max_length=10)  # 평일운영종료시각
    saturday_start = models.CharField(max_length=10)  # 토요일운영시작시각
    saturday_end = models.CharField(max_length=10)  # 토요일운영종료시각
    holiday_start = models.CharField(max_length=10)  # 공휴일운영시작시각
    holiday_end = models.CharField(max_length=10)  # 공휴일운영종료시각

    fee_type = models.CharField(max_length=20)  # 요금정보 (무료/유료/혼합 등)
    base_time = models.IntegerField(default=0)  # 주차기본시간 (분)
    base_fee = models.IntegerField(default=0)  # 주차기본요금
    unit_time = models.IntegerField(default=0)  # 추가단위시간
    unit_fee = models.IntegerField(default=0)  # 추가단위요금

    daily_pass_time = models.IntegerField(null=True, blank=True)  # 1일주차권요금적용시간
    daily_pass_fee = models.IntegerField(null=True, blank=True)  # 1일주차권요금
    monthly_pass_fee = models.IntegerField(null=True, blank=True)  # 월정기권요금

    phone_number = models.CharField(max_length=20)  # 전화번호
    latitude = models.FloatField()  # 위도
    longitude = models.FloatField()  # 경도

    is_disabled_parking = models.BooleanField()  # 장애인전용주차구역보유여부

    def __str__(self):
        return f"{self.name} ({self.number})"

class TrafficCamera(models.Model):
    camera_id = models.CharField(max_length=20, unique=True)  # 관리번호
    address = models.CharField(max_length=255)                # 주소
    latitude = models.FloatField()                            # 위도
    longitude = models.FloatField()                           # 경도

    def __str__(self):
        return f"{self.camera_id} - {self.address}"



#### views.py ####

from django.shortcuts import render
from django.http import JsonResponse
from .models import ParkingLot, TrafficCamera

# HTML 페이지 렌더링
def main(request):
    return render(request, 'main.html')

def parking_lot_list(request):
    data = list(ParkingLot.objects.values('number', 'capacity', 'road_address', 'jibun_address', 'phone_number', 'name', 'latitude', 'longitude'))
    return JsonResponse(data, safe=False)

def traffic_camera_list(request):
    data = list(TrafficCamera.objects.values('camera_id', 'latitude', 'longitude'))
    return JsonResponse(data, safe=False)



#### admin.py ####

from django.contrib import admin
from .models import ParkingLot, TrafficCamera  # TrafficCamera 모델 추가

@admin.register(ParkingLot)
class ParkingLotAdmin(admin.ModelAdmin):
    def get_list_display(self, request):
        return [field.name for field in self.model._meta.fields]

@admin.register(TrafficCamera)  # TrafficCamera 모델을 admin에 등록
class TrafficCameraAdmin(admin.ModelAdmin):
    def get_list_display(self, request):
        return [field.name for field in self.model._meta.fields]


#### import_parking.py ####

import csv
from django.core.management.base import BaseCommand
from testapp.models import ParkingLot  # 👉 앱 이름에 따라 수정하세요
from pathlib import Path

class Command(BaseCommand):
    help = 'Import parking data from CSV file'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str)

    def handle(self, *args, **options):
        csv_path = Path(options['csv_file'])
        if not csv_path.exists():
            self.stdout.write(self.style.ERROR('CSV 파일이 존재하지 않습니다.'))
            return

        with open(csv_path, newline='', encoding='utf-8-sig') as csvfile:
            reader = csv.DictReader(csvfile)

            for row in reader:
                ParkingLot.objects.create(
                    number=int(row['주차장번호']),
                    name=row['주차장명'],
                    category=row['주차장구분'],
                    type=row['주차장유형'],
                    road_address=row['소재지도로명주소'] or None,
                    jibun_address=row['소재지지번주소'] or None,
                    capacity=int(row['주차구획수']),
                    operating_days=row['운영요일'],
                    weekday_start=row['평일운영시작시각'],
                    weekday_end=row['평일운영종료시각'],
                    saturday_start=row['토요일운영시작시각'],
                    saturday_end=row['토요일운영종료시각'],
                    holiday_start=row['공휴일운영시작시각'],
                    holiday_end=row['공휴일운영종료시각'],
                    fee_type=row['요금정보'],
                    base_time=int(row['주차기본시간'] or 0),
                    base_fee=int(row['주차기본요금'] or 0),
                    unit_time=int(row['추가단위시간'] or 0),
                    unit_fee=int(row['추가단위요금'] or 0),
                    daily_pass_time=int(row['1일주차권요금적용시간'] or 0) if row['1일주차권요금적용시간'] else None,
                    daily_pass_fee=int(row['1일주차권요금'] or 0) if row['1일주차권요금'] else None,
                    monthly_pass_fee=int(row['월정기권요금'] or 0) if row['월정기권요금'] else None,
                    phone_number=row['전화번호'],
                    latitude=float(row['위도']),
                    longitude=float(row['경도']),
                    is_disabled_parking=(row['장애인전용주차구역보유여부'].strip().upper() == 'Y'),
                )

            self.stdout.write(self.style.SUCCESS('데이터 삽입 완료!'))


#### import.traffic_cameras.py ####

import csv
from django.core.management.base import BaseCommand
from testapp.models import ParkingLot  # 👉 앱 이름에 따라 수정하세요
from pathlib import Path

class Command(BaseCommand):
    help = 'Import parking data from CSV file'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str)

    def handle(self, *args, **options):
        csv_path = Path(options['csv_file'])
        if not csv_path.exists():
            self.stdout.write(self.style.ERROR('CSV 파일이 존재하지 않습니다.'))
            return

        with open(csv_path, newline='', encoding='utf-8-sig') as csvfile:
            reader = csv.DictReader(csvfile)

            for row in reader:
                ParkingLot.objects.create(
                    number=int(row['주차장번호']),
                    name=row['주차장명'],
                    category=row['주차장구분'],
                    type=row['주차장유형'],
                    road_address=row['소재지도로명주소'] or None,
                    jibun_address=row['소재지지번주소'] or None,
                    capacity=int(row['주차구획수']),
                    operating_days=row['운영요일'],
                    weekday_start=row['평일운영시작시각'],
                    weekday_end=row['평일운영종료시각'],
                    saturday_start=row['토요일운영시작시각'],
                    saturday_end=row['토요일운영종료시각'],
                    holiday_start=row['공휴일운영시작시각'],
                    holiday_end=row['공휴일운영종료시각'],
                    fee_type=row['요금정보'],
                    base_time=int(row['주차기본시간'] or 0),
                    base_fee=int(row['주차기본요금'] or 0),
                    unit_time=int(row['추가단위시간'] or 0),
                    unit_fee=int(row['추가단위요금'] or 0),
                    daily_pass_time=int(row['1일주차권요금적용시간'] or 0) if row['1일주차권요금적용시간'] else None,
                    daily_pass_fee=int(row['1일주차권요금'] or 0) if row['1일주차권요금'] else None,
                    monthly_pass_fee=int(row['월정기권요금'] or 0) if row['월정기권요금'] else None,
                    phone_number=row['전화번호'],
                    latitude=float(row['위도']),
                    longitude=float(row['경도']),
                    is_disabled_parking=(row['장애인전용주차구역보유여부'].strip().upper() == 'Y'),
                )

            self.stdout.write(self.style.SUCCESS('데이터 삽입 완료!'))

